using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

public class HistoryItem
{
    [Key]
    public int Id { get; set; }

    public string Url { get; set; }

    public int LastVisitCount { get; set; }

    public DateTime LastVisitTime { get; set; }

    public ICollection<Collection> Collections { get; set; }
}

public class Collection
{
    [Key]
    public int Id { get; set; }

    public int CollectionNameId { get; set; }  // Foreign Key for CollectionName

    public DateTime CreatedDate { get; set; }

    public int HistoryItemId { get; set; }  // Foreign Key for HistoryItem

    [ForeignKey("HistoryItemId")]
    public HistoryItem HistoryItem { get; set; }

    [ForeignKey("CollectionNameId")]
    public CollectionName CollectionName { get; set; }  // Navigation Property for CollectionName
}

public class CollectionName
{
    [Key]
    public int Id { get; set; }

    public string Name { get; set; }

    public ICollection<Collection> Collections { get; set; }
}

public class YourDbContext : DbContext
{
    public DbSet<HistoryItem> HistoryItems { get; set; }
    public DbSet<Collection> Collections { get; set; }
    public DbSet<CollectionName> CollectionNames { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Collection>()
            .HasOne(c => c.HistoryItem)
            .WithMany(h => h.Collections)
            .HasForeignKey(c => c.HistoryItemId)
            .OnDelete(DeleteBehavior.Cascade);

        modelBuilder.Entity<Collection>()
            .HasOne(c => c.CollectionName)
            .WithMany(cn => cn.Collections)
            .HasForeignKey(c => c.CollectionNameId);
    }
}

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

public class HistoryItem
{
    [Key]
    public int Id { get; set; }

    public string Url { get; set; }

    public int LastVisitCount { get; set; }

    public DateTime LastVisitTime { get; set; }

    public ICollection<Collection> Collections { get; set; }
}

public class Collection
{
    [Key]
    public int Id { get; set; }

    public DateTime CreatedDate { get; set; }

    public int HistoryItemId { get; set; }  // Foreign Key for HistoryItem

    public int CollectionNameId { get; protected set; }  // Foreign Key for CollectionName

    [ForeignKey("HistoryItemId")]
    public HistoryItem HistoryItem { get; set; }

    [ForeignKey("CollectionNameId")]
    public CollectionName CollectionName { get; set; }
}

public class CollectionName
{
    [Key]
    public int Id { get; set; }

    public string Name { get; set; }

    public ICollection<Collection> Collections { get; set; }
}

public class YourDbContext : DbContext
{
    public DbSet<HistoryItem> HistoryItems { get; set; }
    public DbSet<Collection> Collections { get; set; }
    public DbSet<CollectionName> CollectionNames { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Collection>()
            .HasOne(c => c.HistoryItem)
            .WithMany(h => h.Collections)
            .HasForeignKey(c => c.HistoryItemId)
            .OnDelete(DeleteBehavior.Cascade);  // Cascade delete if HistoryItem is deleted

        modelBuilder.Entity<Collection>()
            .HasOne(c => c.CollectionName)
            .WithMany(cn => cn.Collections)
            .HasForeignKey(c => c.CollectionNameId)
            .OnDelete(DeleteBehavior.Cascade);  // Cascade delete if CollectionName is deleted
    }
}

